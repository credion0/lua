--[[
Functions
	moveVec Nx-Ny-Nz-()f client
	getAmount N client
	checkLatestAction
	getFuelLevel



--]]
local debug = false
local latestCalledFunc = "nil"


local x = 0
local y = 0
local z = 0
local f = 0 -- f = [0,3] cE N

local g_x = 0
local g_y = 0
local g_z = 0
local g_f = 0

local turtle_itemCount

-- rednet
local msg


--Turtle informations
local serverID = 3
local turtleID = os.getComputerID()
local turtleJob = "Turtle library"
local home = {0,0,0,0}
local vecHome
--Turtle Inventory contaiment
local turtleInventory = {}

local gprs = false

local screen_x, screen_y = term.getSize()
local t_info = {}


--Chop farm location
local saplingpos = {vector.new(0,0,4),vector.new(0,0,8),vector.new(0,0,12)}

-- Turtle functions

function screen()
	term.clear()
	term.setCursorPos(1,1)
	term.setCursorPos(screen_x - #("Turtle ID: " ..turtleID),1)
	term.setCursorPos(1,2)
	--write("Server id: "..serverID)
		term.setCursorPos(1,3)

		for i=1, screen_x do term.write("-") end
		term.setCursorPos(1,4)
		print("x " ..x.." ",g_x)
		print("y " ..y.." ",g_y)
		print("z " ..z.." ",g_z)
		print("f " ..f.." ",g_f)
		print("fuel : ".. turtle.getFuelLevel())
		print("LatestFunc : "..latestCalledFunc)
	writePos()
end

--[[
	POSITION WRITER / READER
	SERVER START/STOP
]]

function writePos()
	if not gprs then
		file = fs.open("backup","w")
		_pos = x.."x "..y.."y "..z.."z "..f.."f"
		file.writeLine(_pos)
		file.close()
	end
end

function readPos()
	if fs.exists("backup") then
		file = fs.open("backup", "r")
		txt = file.readAll()
		file.close()

		t_coord = {}

		for word in string.gmatch(txt, "[+-]?%d+") do 
			table.insert(t_coord, tonumber(word))
			if debug then print(word) end
		end
		x = t_coord[1]
		y = t_coord[2]
		z = t_coord[3]
		f = t_coord[4]
	end
end


--[[
	TURTLE MOVEMENTS
]]

function forward( ... )
	count = 0
	if debug then
		if f == 0 then
			z = z +1
		elseif f == 1 then
			x = x - 1
		elseif f == 2 then
			z = z -1
		elseif f == 3 then
			x = x + 1
		end
	else
		while true do
			
		ChopChecker()
		if turtle.detect() then turtle.dig() end

			if turtle.forward() then
			 	if f== 0 then
			 		z = z +1
			 		break
			 	elseif f == 1 then
			 		x = x - 1
			 		break
			 	elseif f == 2 then
			 		z = z -1
			 		break
			 	elseif f == 3 then
			 		x = x + 1
			 		break
			 	end
			else
				count = count + 1
				sleep(2)
			end
		end
	end
	screen()
end

function up( ... )
	if debug then
		y = y +1
	else
		if turtle.up() then
		y = y + 1
		end
	end
	screen()
end

function down(...)
	if debug then
		y = y -1
	else
		turtle.digDown()
		if turtle.down() then
		y = y - 1
		end
	end
	screen()
end

function turnleft( ... )
	if not debug then
		turtle.turnLeft()
	end
	f = (f - 1)%4
	screen()
end

function turnright( ... )
	if not debug then
		turtle.turnRight()
	end
	f = (f + 1)%4
	screen()
end

function back()
	if debug then
		if f== 0 then
		 		z = z -1
		 	elseif f == 1 then
		 		x = x + 1
		 	elseif f == 2 then
		 		z = z + 1
		 	elseif f == 3 then
		 		x = x - 1
		 	end

	else
		if turtle.back() then
		 	if f== 0 then
		 		z = z -1
		 	elseif f == 1 then
		 		x = x + 1
		 	elseif f == 2 then
		 		z = z + 1
		 	elseif f == 3 then
		 		x = x - 1
		 	end
		end
	end
	screen()
end

function getFacing(_gf)
	_gf = _gf % 4

	if f == 0 and _gf == 3 then
		turnleft()
	elseif f == 3 and _gf == 0 then
		turnright()
	end

	while _gf ~= f do
		if _gf > f then
			turnright()
		else
			turnleft()
		end
	end
end

function moveOnX(_mox )
	if _mox ~= nil then g_x = _mox end
	while true do
		if g_x == x then break end

		if g_x > x then
			getFacing(3)
		elseif g_x < x then
			getFacing(1)
		end
		
		if not forward() then
		end
	end
end

function moveOnZ( _moz )
	if _moz ~= nil then g_z = _moz end
	while true do
		if g_z == z then break end

		if g_z > z then
			getFacing(0)
		elseif g_z < z then
			getFacing(2)
		end

		if not forward() then
		end		
	end
end

function moveOnY( _moy )
	if _moy ~= nil then g_y = _moy end
	while true do
		if g_y == y then break end

		if g_y > y then
			if not up() then
				turtle.digUp()
			end
		elseif g_y < y then
			if not down()  then
				turtle.digDown()
			end
		end
	end
end


function moveTo(_mvec)
	screen()
	if _mvec ~= nil then
		g_x = tonumber(_mvec.x)
		g_y = tonumber(_mvec.y)
		g_z = tonumber(_mvec.z)
	end

	distX = math.abs(g_x - x)
	distY = math.abs(g_y - y)
	distZ = math.abs(g_z - z)

	if g_y > y then
		moveOnY()
		moveOnX()
		moveOnZ()
	else
		moveOnZ()
		moveOnX()
		moveOnY()
	end
end


--[[
	TURTLE INVENTORY MANAGEMENT
]]

function updateInventory()
	_checkInvSlotCount = 0

	for i=1,16 do
		if turtle.getItemDetail(i) ~= nil then
			turtleInventory[i] = turtle.getItemDetail(i)
			_checkInvSlotCount = _checkInvSlotCount + 1
		end
	end

	
	if _checkInvSlotCount == 16 then
		return true
	else
		return _checkInvSlotCount
	end
end

function checkInventorySlot(_slot)
	checkInvSlot = turtle.getItemDetail(_slot)

	if checkInvSlot ~= nil then
		if checkInvSlot.count ~= nil then
			return true
		end
	end
	return false
end

function SuckItems(_c, _itemName)
	updateInventory()
	while true do
		collectedAmount = 0
		turtle.suck(_c)

		--count lopp
		for i = 1,16 do

			t = turtle.getItemDetail(i)
			

			if checkInventorySlot(i) and t ~= nil then

				k = turtleInventory[i]

				if t.name == _itemName  then 
					if t.count ~= k.count then
						if t.count > k.count then
							collectedAmount = collectedAmount + tonumber(t.count) - tonumber(k.count)
						end
					end
				else -- We got wrong item from chest so lets put it back and alarm the server. TODO
					if t.count > k.count then turtle.select(i) turtle.drop(tonumber(t.count) - tonumber(k.count)) end
				end
			elseif t ~= nil then
				if t.name == _itemName  then
					collectedAmount = collectedAmount + t.count
				else
					turtle.select(i)
					turtle.drop(_c)
					turtle.select(1)
				end
			end
		end

		--Loop breaker
		if collectedAmount >= _c then
			break
		end

		print(collectedAmount)
		sleep(2)
	end

	updateInventory()
end

function storeItem(_c, _itemName)
	updateInventory()

	for i=1,16 do
		t = turtle.getItemDetail(i)
			if _itemName == t.name then
				if turtle.drop(itemdetail.count) ~= nil then
					t_storeItem.count = t_storeItem.count - itemdetail.count
				else -- CHEST IS FULL DO SOMETHING
					rednet.send(serverID,"chestfull givenewchest " + t_storeItem.name)
					_event, _id, _msg, _dist = os.pullEvent("rednet_message")
				end
			end

		if t_storeItem.count <= 0 then break end
	end
end

function refuel( ... )
	if turtle.getFuelLevel() < 500 then
		for i=3,16 do
			turtle.select(i)
			turtle.refuel()
			if turtle.getFuelLevel() > 750 then break end
		end
	end
	turtle.select(1)
end


--[[
Tree farm

]]


--dir
-- 0 down, 1 forward, 2 up
local function compare(_slot, dir )
	turtle.select(_slot)
	_bool = false

	if dir == "down" or dir == 0 then
		_bool = turtle.compareDown()
	elseif dir == "forward" or dir == 1 then
		_bool = turtle.compare()
	elseif dir == "up" or dir == 2 then
		_bool = turtle.compareUp()
	end

	turtle.select(1)

	return _bool	
end

function CheckSapling( ... )
	for i=1,#saplingpos do
		_boolX = vector.new(x,y,z).x == saplingpos[i].x
		_boolY = vector.new(x,y,z).y == saplingpos[i].y
		_boolZ = vector.new(x,y,z).z == saplingpos[i].z

		if _boolX and _boolY and _boolZ then
			if not compare(2,0) then
				turtle.digDown()
				turtle.select(2)
				turtle.placeDown()
				turtle.select(1)
			end
		end
	end
end

function Choptree_rotation( _asd )
	if _asd ~= nil then
		for i=0,3 do
			turnright()
			if compare(1,1) then turtle.dig() end
		end
	else
		for i=0,3 do
			turnright()
			turtle.dig()
		end
	end
	
end

function Choptree( ... )
	_f = f
	while turtle.detectUp() do
		Choptree_rotation()
		turtle.digUp()
		up()
	end

	--getFacing(_f)
	--forward()

	moveTo(vector.new(x,0,z))
	CheckSapling()
	moveTo()
end

function ChopChecker()

	turtle.suck()
	turtle.suckDown()

	if compare(1,2) then
		Choptree()
	elseif compare(1,0) then
		while compare(1,0) do
			turtle.digDown()
			down()
			Choptree_rotation("compare")
		end
		moveTo(vector.new(x,0,z))
		CheckSapling()
	end
end

--[[

	LOOP
	Slot
	1 -	Wood
	2 - Sapling

]]


function startupCheck( ... )


	--Checking fuel
	_b = true

	if turtle.getFuelLevel() > 500 then _b = false end

	while _b do 
		for i=3,16 do
			turtle.select(i)
			if turtle.refuel() then
				_b = false
			end
		end
		turtle.select(1)

		if not _b then
			term.setCursorPos(1,1)
			term.clear()
			print("Put some fuel (slots 3-16).")
		end
	end

	--
	-- Checking right items
	--
	t_startupItems = {"sapling","log"}
	t_errorAt = {}
	for i=1,16 do
		_sucDetail = turtle.getItemDetail(i)
		if _sucDetail ~= nil then
			for x=1, #t_startupItems do
				if string.find(_sucDetail.name, t_startupItems[x] ) then
					table.insert(t_errorAt, x)
				end
			end
		end
	end

	if #t_errorAt > 0 then
		term.clear()
		term.setCursorPos(1,1)
		for i = 1, #t_startupItems do
			print("Couldnt find " .. t_startupItems[i] .. ".")
		end
		
		print("If u are sure u have putted sapling and log")
		print("Press Enter to continue..")
		event, key, isHeld = os.pullEvent("key")
	end
end

function startup()
	startupCheck()
	readPos()
	screen()
	updateInventory()
	moveTo(vector.new(0,0,0))
	--rednet.close("left")
	--rednet.open("left")
	vecHome = vector.new(x,y,z)
end




startup()
while true do

	getFacing(0)

	for i=1,#saplingpos do
		--Go to saplings
		moveTo(saplingpos[i])
		ChopChecker()

		--Check Tree
		CheckSapling()

	end

	--Home
	_boolX = vector.new(x,y,z).x == vector.new(0,0,0).x
	_boolY = vector.new(x,y,z).y == vector.new(0,0,0).x
	_boolZ = vector.new(x,y,z).z == vector.new(0,0,0).x


	while not _boolX or not _boolY or not _boolZ do
		moveTo(vector.new(0,0,0))

		_boolX = vector.new(x,y,z).x == vector.new(0,0,0).x
		_boolY = vector.new(x,y,z).y == vector.new(0,0,0).x
		_boolZ = vector.new(x,y,z).z == vector.new(0,0,0).x
	end

	getFacing(0)
	
	refuel()
	term.setCursorPos(1,1)
	term.clear()
	print("Sleeping 5")
	sleep(5)

